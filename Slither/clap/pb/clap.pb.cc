// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: clap.proto

#include "clap.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_clap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CPU_clap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_clap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GPU_clap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_clap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Hardware_clap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_clap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Heartbeat_clap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_clap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Model_clap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_clap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelInfo_clap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_clap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Trajectory_clap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_clap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Trajectory_Statistics_clap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_clap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_WorkerState_clap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_clap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorkerState_Evaluation_clap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_clap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorkerState_Transition_clap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_clap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorkerState_TreeOption_clap_2eproto;
namespace clap {
namespace pb {
class CPUDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CPU> _instance;
} _CPU_default_instance_;
class GPUDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GPU> _instance;
} _GPU_default_instance_;
class HardwareDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Hardware> _instance;
} _Hardware_default_instance_;
class NodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Node> _instance;
} _Node_default_instance_;
class ModelInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelInfo> _instance;
} _ModelInfo_default_instance_;
class ModelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Model> _instance;
} _Model_default_instance_;
class WorkerState_TreeOptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkerState_TreeOption> _instance;
} _WorkerState_TreeOption_default_instance_;
class WorkerState_EvaluationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkerState_Evaluation> _instance;
} _WorkerState_Evaluation_default_instance_;
class WorkerState_TransitionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkerState_Transition> _instance;
} _WorkerState_Transition_default_instance_;
class WorkerStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkerState> _instance;
} _WorkerState_default_instance_;
class Trajectory_StatisticsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Trajectory_Statistics> _instance;
} _Trajectory_Statistics_default_instance_;
class TrajectoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Trajectory> _instance;
} _Trajectory_default_instance_;
class TrajectoriesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Trajectories> _instance;
} _Trajectories_default_instance_;
class HeartbeatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Heartbeat> _instance;
} _Heartbeat_default_instance_;
class PacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Packet> _instance;
  const ::clap::pb::Heartbeat* heartbeat_;
  const ::clap::pb::Heartbeat* goodbye_;
  const ::clap::pb::Heartbeat* model_subscribe_;
  const ::clap::pb::ModelInfo* model_info_;
  const ::clap::pb::ModelInfo* model_request_;
  const ::clap::pb::Model* model_response_;
  const ::clap::pb::Trajectory* trajectory_;
} _Packet_default_instance_;
}  // namespace pb
}  // namespace clap
static void InitDefaultsscc_info_CPU_clap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clap::pb::_CPU_default_instance_;
    new (ptr) ::clap::pb::CPU();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clap::pb::CPU::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CPU_clap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CPU_clap_2eproto}, {}};

static void InitDefaultsscc_info_GPU_clap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clap::pb::_GPU_default_instance_;
    new (ptr) ::clap::pb::GPU();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clap::pb::GPU::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GPU_clap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GPU_clap_2eproto}, {}};

static void InitDefaultsscc_info_Hardware_clap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clap::pb::_Hardware_default_instance_;
    new (ptr) ::clap::pb::Hardware();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clap::pb::Hardware::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Hardware_clap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Hardware_clap_2eproto}, {
      &scc_info_CPU_clap_2eproto.base,
      &scc_info_GPU_clap_2eproto.base,}};

static void InitDefaultsscc_info_Heartbeat_clap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clap::pb::_Heartbeat_default_instance_;
    new (ptr) ::clap::pb::Heartbeat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clap::pb::Heartbeat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Heartbeat_clap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Heartbeat_clap_2eproto}, {}};

static void InitDefaultsscc_info_Model_clap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clap::pb::_Model_default_instance_;
    new (ptr) ::clap::pb::Model();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clap::pb::Model::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Model_clap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Model_clap_2eproto}, {
      &scc_info_ModelInfo_clap_2eproto.base,}};

static void InitDefaultsscc_info_ModelInfo_clap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clap::pb::_ModelInfo_default_instance_;
    new (ptr) ::clap::pb::ModelInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clap::pb::ModelInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelInfo_clap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModelInfo_clap_2eproto}, {}};

static void InitDefaultsscc_info_Node_clap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clap::pb::_Node_default_instance_;
    new (ptr) ::clap::pb::Node();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clap::pb::Node::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Node_clap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Node_clap_2eproto}, {
      &scc_info_Hardware_clap_2eproto.base,}};

static void InitDefaultsscc_info_Packet_clap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clap::pb::_Packet_default_instance_;
    new (ptr) ::clap::pb::Packet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clap::pb::Packet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Packet_clap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Packet_clap_2eproto}, {
      &scc_info_Heartbeat_clap_2eproto.base,
      &scc_info_ModelInfo_clap_2eproto.base,
      &scc_info_Model_clap_2eproto.base,
      &scc_info_Trajectory_clap_2eproto.base,}};

static void InitDefaultsscc_info_Trajectories_clap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clap::pb::_Trajectories_default_instance_;
    new (ptr) ::clap::pb::Trajectories();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clap::pb::Trajectories::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Trajectories_clap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Trajectories_clap_2eproto}, {
      &scc_info_Trajectory_clap_2eproto.base,}};

static void InitDefaultsscc_info_Trajectory_clap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clap::pb::_Trajectory_default_instance_;
    new (ptr) ::clap::pb::Trajectory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clap::pb::Trajectory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Trajectory_clap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Trajectory_clap_2eproto}, {
      &scc_info_WorkerState_clap_2eproto.base,
      &scc_info_Trajectory_Statistics_clap_2eproto.base,}};

static void InitDefaultsscc_info_Trajectory_Statistics_clap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clap::pb::_Trajectory_Statistics_default_instance_;
    new (ptr) ::clap::pb::Trajectory_Statistics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clap::pb::Trajectory_Statistics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Trajectory_Statistics_clap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Trajectory_Statistics_clap_2eproto}, {}};

static void InitDefaultsscc_info_WorkerState_clap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clap::pb::_WorkerState_default_instance_;
    new (ptr) ::clap::pb::WorkerState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clap::pb::WorkerState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_WorkerState_clap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_WorkerState_clap_2eproto}, {
      &scc_info_WorkerState_TreeOption_clap_2eproto.base,
      &scc_info_WorkerState_Evaluation_clap_2eproto.base,
      &scc_info_WorkerState_Transition_clap_2eproto.base,}};

static void InitDefaultsscc_info_WorkerState_Evaluation_clap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clap::pb::_WorkerState_Evaluation_default_instance_;
    new (ptr) ::clap::pb::WorkerState_Evaluation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clap::pb::WorkerState_Evaluation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorkerState_Evaluation_clap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WorkerState_Evaluation_clap_2eproto}, {}};

static void InitDefaultsscc_info_WorkerState_Transition_clap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clap::pb::_WorkerState_Transition_default_instance_;
    new (ptr) ::clap::pb::WorkerState_Transition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clap::pb::WorkerState_Transition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorkerState_Transition_clap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WorkerState_Transition_clap_2eproto}, {}};

static void InitDefaultsscc_info_WorkerState_TreeOption_clap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clap::pb::_WorkerState_TreeOption_default_instance_;
    new (ptr) ::clap::pb::WorkerState_TreeOption();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clap::pb::WorkerState_TreeOption::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WorkerState_TreeOption_clap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WorkerState_TreeOption_clap_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_clap_2eproto[15];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_clap_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_clap_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_clap_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clap::pb::CPU, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clap::pb::CPU, name_),
  PROTOBUF_FIELD_OFFSET(::clap::pb::CPU, cores_),
  PROTOBUF_FIELD_OFFSET(::clap::pb::CPU, threads_),
  PROTOBUF_FIELD_OFFSET(::clap::pb::CPU, clock_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clap::pb::GPU, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clap::pb::GPU, name_),
  PROTOBUF_FIELD_OFFSET(::clap::pb::GPU, memory_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clap::pb::Hardware, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clap::pb::Hardware, cpus_),
  PROTOBUF_FIELD_OFFSET(::clap::pb::Hardware, gpus_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clap::pb::Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clap::pb::Node, identity_),
  PROTOBUF_FIELD_OFFSET(::clap::pb::Node, hostname_),
  PROTOBUF_FIELD_OFFSET(::clap::pb::Node, hardware_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clap::pb::ModelInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clap::pb::ModelInfo, name_),
  PROTOBUF_FIELD_OFFSET(::clap::pb::ModelInfo, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clap::pb::Model, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clap::pb::Model, info_),
  PROTOBUF_FIELD_OFFSET(::clap::pb::Model, blobs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clap::pb::WorkerState_TreeOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clap::pb::WorkerState_TreeOption, simulation_count_),
  PROTOBUF_FIELD_OFFSET(::clap::pb::WorkerState_TreeOption, tree_min_value_),
  PROTOBUF_FIELD_OFFSET(::clap::pb::WorkerState_TreeOption, tree_max_value_),
  PROTOBUF_FIELD_OFFSET(::clap::pb::WorkerState_TreeOption, c_puct_),
  PROTOBUF_FIELD_OFFSET(::clap::pb::WorkerState_TreeOption, dirichlet_alpha_),
  PROTOBUF_FIELD_OFFSET(::clap::pb::WorkerState_TreeOption, dirichlet_epsilon_),
  PROTOBUF_FIELD_OFFSET(::clap::pb::WorkerState_TreeOption, discount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clap::pb::WorkerState_Evaluation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clap::pb::WorkerState_Evaluation, value_),
  PROTOBUF_FIELD_OFFSET(::clap::pb::WorkerState_Evaluation, policy_),
  PROTOBUF_FIELD_OFFSET(::clap::pb::WorkerState_Evaluation, average_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clap::pb::WorkerState_Transition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clap::pb::WorkerState_Transition, current_player_),
  PROTOBUF_FIELD_OFFSET(::clap::pb::WorkerState_Transition, action_),
  PROTOBUF_FIELD_OFFSET(::clap::pb::WorkerState_Transition, rewards_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clap::pb::WorkerState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clap::pb::WorkerState, legal_actions_),
  PROTOBUF_FIELD_OFFSET(::clap::pb::WorkerState, observation_tensor_),
  PROTOBUF_FIELD_OFFSET(::clap::pb::WorkerState, tree_option_),
  PROTOBUF_FIELD_OFFSET(::clap::pb::WorkerState, evaluation_),
  PROTOBUF_FIELD_OFFSET(::clap::pb::WorkerState, transition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clap::pb::Trajectory_Statistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clap::pb::Trajectory_Statistics, rewards_),
  PROTOBUF_FIELD_OFFSET(::clap::pb::Trajectory_Statistics, game_steps_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clap::pb::Trajectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clap::pb::Trajectory, states_),
  PROTOBUF_FIELD_OFFSET(::clap::pb::Trajectory, statistics_),
  PROTOBUF_FIELD_OFFSET(::clap::pb::Trajectory, appendix_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clap::pb::Trajectories, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::clap::pb::Trajectories, trajectories_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clap::pb::Heartbeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clap::pb::Packet, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::clap::pb::Packet, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::clap::pb::PacketDefaultTypeInternal, heartbeat_),
  offsetof(::clap::pb::PacketDefaultTypeInternal, goodbye_),
  offsetof(::clap::pb::PacketDefaultTypeInternal, model_subscribe_),
  offsetof(::clap::pb::PacketDefaultTypeInternal, model_info_),
  offsetof(::clap::pb::PacketDefaultTypeInternal, model_request_),
  offsetof(::clap::pb::PacketDefaultTypeInternal, model_response_),
  offsetof(::clap::pb::PacketDefaultTypeInternal, trajectory_),
  PROTOBUF_FIELD_OFFSET(::clap::pb::Packet, payload_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::clap::pb::CPU)},
  { 9, -1, sizeof(::clap::pb::GPU)},
  { 16, -1, sizeof(::clap::pb::Hardware)},
  { 23, -1, sizeof(::clap::pb::Node)},
  { 31, -1, sizeof(::clap::pb::ModelInfo)},
  { 38, -1, sizeof(::clap::pb::Model)},
  { 45, -1, sizeof(::clap::pb::WorkerState_TreeOption)},
  { 57, -1, sizeof(::clap::pb::WorkerState_Evaluation)},
  { 65, -1, sizeof(::clap::pb::WorkerState_Transition)},
  { 73, -1, sizeof(::clap::pb::WorkerState)},
  { 83, -1, sizeof(::clap::pb::Trajectory_Statistics)},
  { 90, -1, sizeof(::clap::pb::Trajectory)},
  { 98, -1, sizeof(::clap::pb::Trajectories)},
  { 104, -1, sizeof(::clap::pb::Heartbeat)},
  { 109, -1, sizeof(::clap::pb::Packet)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clap::pb::_CPU_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clap::pb::_GPU_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clap::pb::_Hardware_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clap::pb::_Node_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clap::pb::_ModelInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clap::pb::_Model_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clap::pb::_WorkerState_TreeOption_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clap::pb::_WorkerState_Evaluation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clap::pb::_WorkerState_Transition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clap::pb::_WorkerState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clap::pb::_Trajectory_Statistics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clap::pb::_Trajectory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clap::pb::_Trajectories_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clap::pb::_Heartbeat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::clap::pb::_Packet_default_instance_),
};

const char descriptor_table_protodef_clap_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nclap.proto\022\007clap.pb\"B\n\003CPU\022\014\n\004name\030\001 \001"
  "(\t\022\r\n\005cores\030\002 \001(\005\022\017\n\007threads\030\003 \001(\005\022\r\n\005cl"
  "ock\030\004 \001(\002\"#\n\003GPU\022\014\n\004name\030\001 \001(\t\022\016\n\006memory"
  "\030\002 \001(\003\"B\n\010Hardware\022\032\n\004cpus\030\001 \003(\0132\014.clap."
  "pb.CPU\022\032\n\004gpus\030\002 \003(\0132\014.clap.pb.GPU\"O\n\004No"
  "de\022\020\n\010identity\030\001 \001(\t\022\020\n\010hostname\030\002 \001(\t\022#"
  "\n\010hardware\030\003 \001(\0132\021.clap.pb.Hardware\"*\n\tM"
  "odelInfo\022\014\n\004name\030\001 \001(\t\022\017\n\007version\030\002 \001(\005\""
  "8\n\005Model\022 \n\004info\030\001 \001(\0132\022.clap.pb.ModelIn"
  "fo\022\r\n\005blobs\030\002 \003(\014\"\232\004\n\013WorkerState\022\025\n\rleg"
  "al_actions\030\001 \003(\005\022\032\n\022observation_tensor\030\002"
  " \003(\002\0224\n\013tree_option\030\003 \001(\0132\037.clap.pb.Work"
  "erState.TreeOption\0223\n\nevaluation\030\004 \001(\0132\037"
  ".clap.pb.WorkerState.Evaluation\0223\n\ntrans"
  "ition\030\005 \001(\0132\037.clap.pb.WorkerState.Transi"
  "tion\032\254\001\n\nTreeOption\022\030\n\020simulation_count\030"
  "\001 \001(\005\022\026\n\016tree_min_value\030\002 \001(\002\022\026\n\016tree_ma"
  "x_value\030\003 \001(\002\022\016\n\006c_puct\030\004 \001(\002\022\027\n\017dirichl"
  "et_alpha\030\005 \001(\002\022\031\n\021dirichlet_epsilon\030\006 \001("
  "\002\022\020\n\010discount\030\007 \001(\002\032B\n\nEvaluation\022\r\n\005val"
  "ue\030\001 \001(\002\022\016\n\006policy\030\002 \003(\002\022\025\n\raverage_valu"
  "e\030\003 \001(\002\032E\n\nTransition\022\026\n\016current_player\030"
  "\001 \001(\005\022\016\n\006action\030\002 \001(\005\022\017\n\007rewards\030\003 \003(\002\"\253"
  "\001\n\nTrajectory\022$\n\006states\030\001 \003(\0132\024.clap.pb."
  "WorkerState\0222\n\nstatistics\030\002 \001(\0132\036.clap.p"
  "b.Trajectory.Statistics\022\020\n\010appendix\030\003 \001("
  "\t\0321\n\nStatistics\022\017\n\007rewards\030\001 \003(\002\022\022\n\ngame"
  "_steps\030\002 \001(\005\"9\n\014Trajectories\022)\n\014trajecto"
  "ries\030\001 \003(\0132\023.clap.pb.Trajectory\"\013\n\tHeart"
  "beat\"\276\002\n\006Packet\022\'\n\theartbeat\030\001 \001(\0132\022.cla"
  "p.pb.HeartbeatH\000\022%\n\007goodbye\030\002 \001(\0132\022.clap"
  ".pb.HeartbeatH\000\022-\n\017model_subscribe\030\003 \001(\013"
  "2\022.clap.pb.HeartbeatH\000\022(\n\nmodel_info\030\004 \001"
  "(\0132\022.clap.pb.ModelInfoH\000\022+\n\rmodel_reques"
  "t\030\005 \001(\0132\022.clap.pb.ModelInfoH\000\022(\n\016model_r"
  "esponse\030\006 \001(\0132\016.clap.pb.ModelH\000\022)\n\ntraje"
  "ctory\030\007 \001(\0132\023.clap.pb.TrajectoryH\000B\t\n\007pa"
  "yloadb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_clap_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_clap_2eproto_sccs[15] = {
  &scc_info_CPU_clap_2eproto.base,
  &scc_info_GPU_clap_2eproto.base,
  &scc_info_Hardware_clap_2eproto.base,
  &scc_info_Heartbeat_clap_2eproto.base,
  &scc_info_Model_clap_2eproto.base,
  &scc_info_ModelInfo_clap_2eproto.base,
  &scc_info_Node_clap_2eproto.base,
  &scc_info_Packet_clap_2eproto.base,
  &scc_info_Trajectories_clap_2eproto.base,
  &scc_info_Trajectory_clap_2eproto.base,
  &scc_info_Trajectory_Statistics_clap_2eproto.base,
  &scc_info_WorkerState_clap_2eproto.base,
  &scc_info_WorkerState_Evaluation_clap_2eproto.base,
  &scc_info_WorkerState_Transition_clap_2eproto.base,
  &scc_info_WorkerState_TreeOption_clap_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_clap_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_clap_2eproto = {
  false, false, descriptor_table_protodef_clap_2eproto, "clap.proto", 1493,
  &descriptor_table_clap_2eproto_once, descriptor_table_clap_2eproto_sccs, descriptor_table_clap_2eproto_deps, 15, 0,
  schemas, file_default_instances, TableStruct_clap_2eproto::offsets,
  file_level_metadata_clap_2eproto, 15, file_level_enum_descriptors_clap_2eproto, file_level_service_descriptors_clap_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_clap_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_clap_2eproto)), true);
namespace clap {
namespace pb {

// ===================================================================

void CPU::InitAsDefaultInstance() {
}
class CPU::_Internal {
 public:
};

CPU::CPU(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clap.pb.CPU)
}
CPU::CPU(const CPU& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&cores_, &from.cores_,
    static_cast<size_t>(reinterpret_cast<char*>(&clock_) -
    reinterpret_cast<char*>(&cores_)) + sizeof(clock_));
  // @@protoc_insertion_point(copy_constructor:clap.pb.CPU)
}

void CPU::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CPU_clap_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cores_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clock_) -
      reinterpret_cast<char*>(&cores_)) + sizeof(clock_));
}

CPU::~CPU() {
  // @@protoc_insertion_point(destructor:clap.pb.CPU)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPU::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CPU::ArenaDtor(void* object) {
  CPU* _this = reinterpret_cast< CPU* >(object);
  (void)_this;
}
void CPU::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPU::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CPU& CPU::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CPU_clap_2eproto.base);
  return *internal_default_instance();
}


void CPU::Clear() {
// @@protoc_insertion_point(message_clear_start:clap.pb.CPU)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&cores_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clock_) -
      reinterpret_cast<char*>(&cores_)) + sizeof(clock_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPU::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clap.pb.CPU.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cores = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cores_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 threads = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          threads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float clock = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          clock_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPU::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clap.pb.CPU)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clap.pb.CPU.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 cores = 2;
  if (this->cores() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_cores(), target);
  }

  // int32 threads = 3;
  if (this->threads() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_threads(), target);
  }

  // float clock = 4;
  if (!(this->clock() <= 0 && this->clock() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_clock(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clap.pb.CPU)
  return target;
}

size_t CPU::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clap.pb.CPU)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 cores = 2;
  if (this->cores() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cores());
  }

  // int32 threads = 3;
  if (this->threads() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_threads());
  }

  // float clock = 4;
  if (!(this->clock() <= 0 && this->clock() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPU::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clap.pb.CPU)
  GOOGLE_DCHECK_NE(&from, this);
  const CPU* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPU>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clap.pb.CPU)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clap.pb.CPU)
    MergeFrom(*source);
  }
}

void CPU::MergeFrom(const CPU& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clap.pb.CPU)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.cores() != 0) {
    _internal_set_cores(from._internal_cores());
  }
  if (from.threads() != 0) {
    _internal_set_threads(from._internal_threads());
  }
  if (!(from.clock() <= 0 && from.clock() >= 0)) {
    _internal_set_clock(from._internal_clock());
  }
}

void CPU::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clap.pb.CPU)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPU::CopyFrom(const CPU& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clap.pb.CPU)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPU::IsInitialized() const {
  return true;
}

void CPU::InternalSwap(CPU* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPU, clock_)
      + sizeof(CPU::clock_)
      - PROTOBUF_FIELD_OFFSET(CPU, cores_)>(
          reinterpret_cast<char*>(&cores_),
          reinterpret_cast<char*>(&other->cores_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPU::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GPU::InitAsDefaultInstance() {
}
class GPU::_Internal {
 public:
};

GPU::GPU(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clap.pb.GPU)
}
GPU::GPU(const GPU& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  memory_ = from.memory_;
  // @@protoc_insertion_point(copy_constructor:clap.pb.GPU)
}

void GPU::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GPU_clap_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  memory_ = PROTOBUF_LONGLONG(0);
}

GPU::~GPU() {
  // @@protoc_insertion_point(destructor:clap.pb.GPU)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GPU::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GPU::ArenaDtor(void* object) {
  GPU* _this = reinterpret_cast< GPU* >(object);
  (void)_this;
}
void GPU::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GPU::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GPU& GPU::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GPU_clap_2eproto.base);
  return *internal_default_instance();
}


void GPU::Clear() {
// @@protoc_insertion_point(message_clear_start:clap.pb.GPU)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  memory_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GPU::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clap.pb.GPU.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 memory = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          memory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GPU::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clap.pb.GPU)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clap.pb.GPU.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int64 memory = 2;
  if (this->memory() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_memory(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clap.pb.GPU)
  return target;
}

size_t GPU::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clap.pb.GPU)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int64 memory = 2;
  if (this->memory() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_memory());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GPU::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clap.pb.GPU)
  GOOGLE_DCHECK_NE(&from, this);
  const GPU* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GPU>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clap.pb.GPU)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clap.pb.GPU)
    MergeFrom(*source);
  }
}

void GPU::MergeFrom(const GPU& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clap.pb.GPU)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.memory() != 0) {
    _internal_set_memory(from._internal_memory());
  }
}

void GPU::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clap.pb.GPU)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPU::CopyFrom(const GPU& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clap.pb.GPU)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPU::IsInitialized() const {
  return true;
}

void GPU::InternalSwap(GPU* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(memory_, other->memory_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GPU::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Hardware::InitAsDefaultInstance() {
}
class Hardware::_Internal {
 public:
};

Hardware::Hardware(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cpus_(arena),
  gpus_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clap.pb.Hardware)
}
Hardware::Hardware(const Hardware& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cpus_(from.cpus_),
      gpus_(from.gpus_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:clap.pb.Hardware)
}

void Hardware::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Hardware_clap_2eproto.base);
}

Hardware::~Hardware() {
  // @@protoc_insertion_point(destructor:clap.pb.Hardware)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Hardware::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Hardware::ArenaDtor(void* object) {
  Hardware* _this = reinterpret_cast< Hardware* >(object);
  (void)_this;
}
void Hardware::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Hardware::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Hardware& Hardware::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Hardware_clap_2eproto.base);
  return *internal_default_instance();
}


void Hardware::Clear() {
// @@protoc_insertion_point(message_clear_start:clap.pb.Hardware)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cpus_.Clear();
  gpus_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Hardware::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .clap.pb.CPU cpus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cpus(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .clap.pb.GPU gpus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gpus(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Hardware::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clap.pb.Hardware)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .clap.pb.CPU cpus = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cpus_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_cpus(i), target, stream);
  }

  // repeated .clap.pb.GPU gpus = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gpus_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_gpus(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clap.pb.Hardware)
  return target;
}

size_t Hardware::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clap.pb.Hardware)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clap.pb.CPU cpus = 1;
  total_size += 1UL * this->_internal_cpus_size();
  for (const auto& msg : this->cpus_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .clap.pb.GPU gpus = 2;
  total_size += 1UL * this->_internal_gpus_size();
  for (const auto& msg : this->gpus_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Hardware::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clap.pb.Hardware)
  GOOGLE_DCHECK_NE(&from, this);
  const Hardware* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Hardware>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clap.pb.Hardware)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clap.pb.Hardware)
    MergeFrom(*source);
  }
}

void Hardware::MergeFrom(const Hardware& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clap.pb.Hardware)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cpus_.MergeFrom(from.cpus_);
  gpus_.MergeFrom(from.gpus_);
}

void Hardware::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clap.pb.Hardware)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hardware::CopyFrom(const Hardware& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clap.pb.Hardware)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hardware::IsInitialized() const {
  return true;
}

void Hardware::InternalSwap(Hardware* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cpus_.InternalSwap(&other->cpus_);
  gpus_.InternalSwap(&other->gpus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Hardware::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Node::InitAsDefaultInstance() {
  ::clap::pb::_Node_default_instance_._instance.get_mutable()->hardware_ = const_cast< ::clap::pb::Hardware*>(
      ::clap::pb::Hardware::internal_default_instance());
}
class Node::_Internal {
 public:
  static const ::clap::pb::Hardware& hardware(const Node* msg);
};

const ::clap::pb::Hardware&
Node::_Internal::hardware(const Node* msg) {
  return *msg->hardware_;
}
Node::Node(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clap.pb.Node)
}
Node::Node(const Node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  identity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_identity().empty()) {
    identity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_identity(),
      GetArena());
  }
  hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hostname().empty()) {
    hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hostname(),
      GetArena());
  }
  if (from._internal_has_hardware()) {
    hardware_ = new ::clap::pb::Hardware(*from.hardware_);
  } else {
    hardware_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clap.pb.Node)
}

void Node::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Node_clap_2eproto.base);
  identity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hardware_ = nullptr;
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:clap.pb.Node)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Node::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  identity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hostname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hardware_;
}

void Node::ArenaDtor(void* object) {
  Node* _this = reinterpret_cast< Node* >(object);
  (void)_this;
}
void Node::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Node& Node::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Node_clap_2eproto.base);
  return *internal_default_instance();
}


void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:clap.pb.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  identity_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hostname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && hardware_ != nullptr) {
    delete hardware_;
  }
  hardware_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Node::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string identity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_identity();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clap.pb.Node.identity"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string hostname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_hostname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clap.pb.Node.hostname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clap.pb.Hardware hardware = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_hardware(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Node::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clap.pb.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string identity = 1;
  if (this->identity().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_identity().data(), static_cast<int>(this->_internal_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clap.pb.Node.identity");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_identity(), target);
  }

  // string hostname = 2;
  if (this->hostname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clap.pb.Node.hostname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hostname(), target);
  }

  // .clap.pb.Hardware hardware = 3;
  if (this->has_hardware()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::hardware(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clap.pb.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clap.pb.Node)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string identity = 1;
  if (this->identity().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identity());
  }

  // string hostname = 2;
  if (this->hostname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostname());
  }

  // .clap.pb.Hardware hardware = 3;
  if (this->has_hardware()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hardware_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Node::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clap.pb.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const Node* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Node>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clap.pb.Node)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clap.pb.Node)
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clap.pb.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.identity().size() > 0) {
    _internal_set_identity(from._internal_identity());
  }
  if (from.hostname().size() > 0) {
    _internal_set_hostname(from._internal_hostname());
  }
  if (from.has_hardware()) {
    _internal_mutable_hardware()->::clap::pb::Hardware::MergeFrom(from._internal_hardware());
  }
}

void Node::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clap.pb.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clap.pb.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  return true;
}

void Node::InternalSwap(Node* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  identity_.Swap(&other->identity_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hostname_.Swap(&other->hostname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(hardware_, other->hardware_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Node::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModelInfo::InitAsDefaultInstance() {
}
class ModelInfo::_Internal {
 public:
};

ModelInfo::ModelInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clap.pb.ModelInfo)
}
ModelInfo::ModelInfo(const ModelInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:clap.pb.ModelInfo)
}

void ModelInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelInfo_clap_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
}

ModelInfo::~ModelInfo() {
  // @@protoc_insertion_point(destructor:clap.pb.ModelInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModelInfo::ArenaDtor(void* object) {
  ModelInfo* _this = reinterpret_cast< ModelInfo* >(object);
  (void)_this;
}
void ModelInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelInfo& ModelInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelInfo_clap_2eproto.base);
  return *internal_default_instance();
}


void ModelInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:clap.pb.ModelInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clap.pb.ModelInfo.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clap.pb.ModelInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clap.pb.ModelInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 version = 2;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clap.pb.ModelInfo)
  return target;
}

size_t ModelInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clap.pb.ModelInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 version = 2;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clap.pb.ModelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clap.pb.ModelInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clap.pb.ModelInfo)
    MergeFrom(*source);
  }
}

void ModelInfo::MergeFrom(const ModelInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clap.pb.ModelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
}

void ModelInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clap.pb.ModelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelInfo::CopyFrom(const ModelInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clap.pb.ModelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelInfo::IsInitialized() const {
  return true;
}

void ModelInfo::InternalSwap(ModelInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Model::InitAsDefaultInstance() {
  ::clap::pb::_Model_default_instance_._instance.get_mutable()->info_ = const_cast< ::clap::pb::ModelInfo*>(
      ::clap::pb::ModelInfo::internal_default_instance());
}
class Model::_Internal {
 public:
  static const ::clap::pb::ModelInfo& info(const Model* msg);
};

const ::clap::pb::ModelInfo&
Model::_Internal::info(const Model* msg) {
  return *msg->info_;
}
Model::Model(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  blobs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clap.pb.Model)
}
Model::Model(const Model& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      blobs_(from.blobs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::clap::pb::ModelInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clap.pb.Model)
}

void Model::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Model_clap_2eproto.base);
  info_ = nullptr;
}

Model::~Model() {
  // @@protoc_insertion_point(destructor:clap.pb.Model)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Model::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete info_;
}

void Model::ArenaDtor(void* object) {
  Model* _this = reinterpret_cast< Model* >(object);
  (void)_this;
}
void Model::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Model::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Model& Model::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Model_clap_2eproto.base);
  return *internal_default_instance();
}


void Model::Clear() {
// @@protoc_insertion_point(message_clear_start:clap.pb.Model)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blobs_.Clear();
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Model::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clap.pb.ModelInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes blobs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_blobs();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Model::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clap.pb.Model)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clap.pb.ModelInfo info = 1;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  // repeated bytes blobs = 2;
  for (int i = 0, n = this->_internal_blobs_size(); i < n; i++) {
    const auto& s = this->_internal_blobs(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clap.pb.Model)
  return target;
}

size_t Model::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clap.pb.Model)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes blobs = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(blobs_.size());
  for (int i = 0, n = blobs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      blobs_.Get(i));
  }

  // .clap.pb.ModelInfo info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Model::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clap.pb.Model)
  GOOGLE_DCHECK_NE(&from, this);
  const Model* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Model>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clap.pb.Model)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clap.pb.Model)
    MergeFrom(*source);
  }
}

void Model::MergeFrom(const Model& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clap.pb.Model)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blobs_.MergeFrom(from.blobs_);
  if (from.has_info()) {
    _internal_mutable_info()->::clap::pb::ModelInfo::MergeFrom(from._internal_info());
  }
}

void Model::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clap.pb.Model)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Model::CopyFrom(const Model& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clap.pb.Model)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Model::IsInitialized() const {
  return true;
}

void Model::InternalSwap(Model* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  blobs_.InternalSwap(&other->blobs_);
  swap(info_, other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Model::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WorkerState_TreeOption::InitAsDefaultInstance() {
}
class WorkerState_TreeOption::_Internal {
 public:
};

WorkerState_TreeOption::WorkerState_TreeOption(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clap.pb.WorkerState.TreeOption)
}
WorkerState_TreeOption::WorkerState_TreeOption(const WorkerState_TreeOption& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&simulation_count_, &from.simulation_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&discount_) -
    reinterpret_cast<char*>(&simulation_count_)) + sizeof(discount_));
  // @@protoc_insertion_point(copy_constructor:clap.pb.WorkerState.TreeOption)
}

void WorkerState_TreeOption::SharedCtor() {
  ::memset(&simulation_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&discount_) -
      reinterpret_cast<char*>(&simulation_count_)) + sizeof(discount_));
}

WorkerState_TreeOption::~WorkerState_TreeOption() {
  // @@protoc_insertion_point(destructor:clap.pb.WorkerState.TreeOption)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkerState_TreeOption::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WorkerState_TreeOption::ArenaDtor(void* object) {
  WorkerState_TreeOption* _this = reinterpret_cast< WorkerState_TreeOption* >(object);
  (void)_this;
}
void WorkerState_TreeOption::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkerState_TreeOption::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkerState_TreeOption& WorkerState_TreeOption::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkerState_TreeOption_clap_2eproto.base);
  return *internal_default_instance();
}


void WorkerState_TreeOption::Clear() {
// @@protoc_insertion_point(message_clear_start:clap.pb.WorkerState.TreeOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&simulation_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&discount_) -
      reinterpret_cast<char*>(&simulation_count_)) + sizeof(discount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkerState_TreeOption::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 simulation_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          simulation_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float tree_min_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          tree_min_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float tree_max_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          tree_max_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float c_puct = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          c_puct_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float dirichlet_alpha = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          dirichlet_alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float dirichlet_epsilon = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          dirichlet_epsilon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float discount = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          discount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkerState_TreeOption::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clap.pb.WorkerState.TreeOption)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 simulation_count = 1;
  if (this->simulation_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_simulation_count(), target);
  }

  // float tree_min_value = 2;
  if (!(this->tree_min_value() <= 0 && this->tree_min_value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_tree_min_value(), target);
  }

  // float tree_max_value = 3;
  if (!(this->tree_max_value() <= 0 && this->tree_max_value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_tree_max_value(), target);
  }

  // float c_puct = 4;
  if (!(this->c_puct() <= 0 && this->c_puct() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_c_puct(), target);
  }

  // float dirichlet_alpha = 5;
  if (!(this->dirichlet_alpha() <= 0 && this->dirichlet_alpha() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_dirichlet_alpha(), target);
  }

  // float dirichlet_epsilon = 6;
  if (!(this->dirichlet_epsilon() <= 0 && this->dirichlet_epsilon() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_dirichlet_epsilon(), target);
  }

  // float discount = 7;
  if (!(this->discount() <= 0 && this->discount() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_discount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clap.pb.WorkerState.TreeOption)
  return target;
}

size_t WorkerState_TreeOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clap.pb.WorkerState.TreeOption)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 simulation_count = 1;
  if (this->simulation_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_simulation_count());
  }

  // float tree_min_value = 2;
  if (!(this->tree_min_value() <= 0 && this->tree_min_value() >= 0)) {
    total_size += 1 + 4;
  }

  // float tree_max_value = 3;
  if (!(this->tree_max_value() <= 0 && this->tree_max_value() >= 0)) {
    total_size += 1 + 4;
  }

  // float c_puct = 4;
  if (!(this->c_puct() <= 0 && this->c_puct() >= 0)) {
    total_size += 1 + 4;
  }

  // float dirichlet_alpha = 5;
  if (!(this->dirichlet_alpha() <= 0 && this->dirichlet_alpha() >= 0)) {
    total_size += 1 + 4;
  }

  // float dirichlet_epsilon = 6;
  if (!(this->dirichlet_epsilon() <= 0 && this->dirichlet_epsilon() >= 0)) {
    total_size += 1 + 4;
  }

  // float discount = 7;
  if (!(this->discount() <= 0 && this->discount() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkerState_TreeOption::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clap.pb.WorkerState.TreeOption)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkerState_TreeOption* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkerState_TreeOption>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clap.pb.WorkerState.TreeOption)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clap.pb.WorkerState.TreeOption)
    MergeFrom(*source);
  }
}

void WorkerState_TreeOption::MergeFrom(const WorkerState_TreeOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clap.pb.WorkerState.TreeOption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.simulation_count() != 0) {
    _internal_set_simulation_count(from._internal_simulation_count());
  }
  if (!(from.tree_min_value() <= 0 && from.tree_min_value() >= 0)) {
    _internal_set_tree_min_value(from._internal_tree_min_value());
  }
  if (!(from.tree_max_value() <= 0 && from.tree_max_value() >= 0)) {
    _internal_set_tree_max_value(from._internal_tree_max_value());
  }
  if (!(from.c_puct() <= 0 && from.c_puct() >= 0)) {
    _internal_set_c_puct(from._internal_c_puct());
  }
  if (!(from.dirichlet_alpha() <= 0 && from.dirichlet_alpha() >= 0)) {
    _internal_set_dirichlet_alpha(from._internal_dirichlet_alpha());
  }
  if (!(from.dirichlet_epsilon() <= 0 && from.dirichlet_epsilon() >= 0)) {
    _internal_set_dirichlet_epsilon(from._internal_dirichlet_epsilon());
  }
  if (!(from.discount() <= 0 && from.discount() >= 0)) {
    _internal_set_discount(from._internal_discount());
  }
}

void WorkerState_TreeOption::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clap.pb.WorkerState.TreeOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkerState_TreeOption::CopyFrom(const WorkerState_TreeOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clap.pb.WorkerState.TreeOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerState_TreeOption::IsInitialized() const {
  return true;
}

void WorkerState_TreeOption::InternalSwap(WorkerState_TreeOption* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkerState_TreeOption, discount_)
      + sizeof(WorkerState_TreeOption::discount_)
      - PROTOBUF_FIELD_OFFSET(WorkerState_TreeOption, simulation_count_)>(
          reinterpret_cast<char*>(&simulation_count_),
          reinterpret_cast<char*>(&other->simulation_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkerState_TreeOption::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WorkerState_Evaluation::InitAsDefaultInstance() {
}
class WorkerState_Evaluation::_Internal {
 public:
};

WorkerState_Evaluation::WorkerState_Evaluation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  policy_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clap.pb.WorkerState.Evaluation)
}
WorkerState_Evaluation::WorkerState_Evaluation(const WorkerState_Evaluation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      policy_(from.policy_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&average_value_) -
    reinterpret_cast<char*>(&value_)) + sizeof(average_value_));
  // @@protoc_insertion_point(copy_constructor:clap.pb.WorkerState.Evaluation)
}

void WorkerState_Evaluation::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&average_value_) -
      reinterpret_cast<char*>(&value_)) + sizeof(average_value_));
}

WorkerState_Evaluation::~WorkerState_Evaluation() {
  // @@protoc_insertion_point(destructor:clap.pb.WorkerState.Evaluation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkerState_Evaluation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WorkerState_Evaluation::ArenaDtor(void* object) {
  WorkerState_Evaluation* _this = reinterpret_cast< WorkerState_Evaluation* >(object);
  (void)_this;
}
void WorkerState_Evaluation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkerState_Evaluation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkerState_Evaluation& WorkerState_Evaluation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkerState_Evaluation_clap_2eproto.base);
  return *internal_default_instance();
}


void WorkerState_Evaluation::Clear() {
// @@protoc_insertion_point(message_clear_start:clap.pb.WorkerState.Evaluation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  policy_.Clear();
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&average_value_) -
      reinterpret_cast<char*>(&value_)) + sizeof(average_value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkerState_Evaluation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float policy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_policy(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_policy(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float average_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          average_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkerState_Evaluation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clap.pb.WorkerState.Evaluation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float value = 1;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_value(), target);
  }

  // repeated float policy = 2;
  if (this->_internal_policy_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_policy(), target);
  }

  // float average_value = 3;
  if (!(this->average_value() <= 0 && this->average_value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_average_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clap.pb.WorkerState.Evaluation)
  return target;
}

size_t WorkerState_Evaluation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clap.pb.WorkerState.Evaluation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float policy = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_policy_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _policy_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // float value = 1;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 4;
  }

  // float average_value = 3;
  if (!(this->average_value() <= 0 && this->average_value() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkerState_Evaluation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clap.pb.WorkerState.Evaluation)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkerState_Evaluation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkerState_Evaluation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clap.pb.WorkerState.Evaluation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clap.pb.WorkerState.Evaluation)
    MergeFrom(*source);
  }
}

void WorkerState_Evaluation::MergeFrom(const WorkerState_Evaluation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clap.pb.WorkerState.Evaluation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  policy_.MergeFrom(from.policy_);
  if (!(from.value() <= 0 && from.value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
  if (!(from.average_value() <= 0 && from.average_value() >= 0)) {
    _internal_set_average_value(from._internal_average_value());
  }
}

void WorkerState_Evaluation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clap.pb.WorkerState.Evaluation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkerState_Evaluation::CopyFrom(const WorkerState_Evaluation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clap.pb.WorkerState.Evaluation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerState_Evaluation::IsInitialized() const {
  return true;
}

void WorkerState_Evaluation::InternalSwap(WorkerState_Evaluation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  policy_.InternalSwap(&other->policy_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkerState_Evaluation, average_value_)
      + sizeof(WorkerState_Evaluation::average_value_)
      - PROTOBUF_FIELD_OFFSET(WorkerState_Evaluation, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkerState_Evaluation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WorkerState_Transition::InitAsDefaultInstance() {
}
class WorkerState_Transition::_Internal {
 public:
};

WorkerState_Transition::WorkerState_Transition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rewards_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clap.pb.WorkerState.Transition)
}
WorkerState_Transition::WorkerState_Transition(const WorkerState_Transition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rewards_(from.rewards_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&current_player_, &from.current_player_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&current_player_)) + sizeof(action_));
  // @@protoc_insertion_point(copy_constructor:clap.pb.WorkerState.Transition)
}

void WorkerState_Transition::SharedCtor() {
  ::memset(&current_player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&current_player_)) + sizeof(action_));
}

WorkerState_Transition::~WorkerState_Transition() {
  // @@protoc_insertion_point(destructor:clap.pb.WorkerState.Transition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkerState_Transition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WorkerState_Transition::ArenaDtor(void* object) {
  WorkerState_Transition* _this = reinterpret_cast< WorkerState_Transition* >(object);
  (void)_this;
}
void WorkerState_Transition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkerState_Transition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkerState_Transition& WorkerState_Transition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkerState_Transition_clap_2eproto.base);
  return *internal_default_instance();
}


void WorkerState_Transition::Clear() {
// @@protoc_insertion_point(message_clear_start:clap.pb.WorkerState.Transition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rewards_.Clear();
  ::memset(&current_player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&current_player_)) + sizeof(action_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkerState_Transition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 current_player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          current_player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float rewards = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_rewards(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          _internal_add_rewards(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkerState_Transition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clap.pb.WorkerState.Transition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 current_player = 1;
  if (this->current_player() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_current_player(), target);
  }

  // int32 action = 2;
  if (this->action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_action(), target);
  }

  // repeated float rewards = 3;
  if (this->_internal_rewards_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_rewards(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clap.pb.WorkerState.Transition)
  return target;
}

size_t WorkerState_Transition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clap.pb.WorkerState.Transition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float rewards = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_rewards_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _rewards_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 current_player = 1;
  if (this->current_player() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_current_player());
  }

  // int32 action = 2;
  if (this->action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_action());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkerState_Transition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clap.pb.WorkerState.Transition)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkerState_Transition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkerState_Transition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clap.pb.WorkerState.Transition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clap.pb.WorkerState.Transition)
    MergeFrom(*source);
  }
}

void WorkerState_Transition::MergeFrom(const WorkerState_Transition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clap.pb.WorkerState.Transition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rewards_.MergeFrom(from.rewards_);
  if (from.current_player() != 0) {
    _internal_set_current_player(from._internal_current_player());
  }
  if (from.action() != 0) {
    _internal_set_action(from._internal_action());
  }
}

void WorkerState_Transition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clap.pb.WorkerState.Transition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkerState_Transition::CopyFrom(const WorkerState_Transition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clap.pb.WorkerState.Transition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerState_Transition::IsInitialized() const {
  return true;
}

void WorkerState_Transition::InternalSwap(WorkerState_Transition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rewards_.InternalSwap(&other->rewards_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkerState_Transition, action_)
      + sizeof(WorkerState_Transition::action_)
      - PROTOBUF_FIELD_OFFSET(WorkerState_Transition, current_player_)>(
          reinterpret_cast<char*>(&current_player_),
          reinterpret_cast<char*>(&other->current_player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkerState_Transition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WorkerState::InitAsDefaultInstance() {
  ::clap::pb::_WorkerState_default_instance_._instance.get_mutable()->tree_option_ = const_cast< ::clap::pb::WorkerState_TreeOption*>(
      ::clap::pb::WorkerState_TreeOption::internal_default_instance());
  ::clap::pb::_WorkerState_default_instance_._instance.get_mutable()->evaluation_ = const_cast< ::clap::pb::WorkerState_Evaluation*>(
      ::clap::pb::WorkerState_Evaluation::internal_default_instance());
  ::clap::pb::_WorkerState_default_instance_._instance.get_mutable()->transition_ = const_cast< ::clap::pb::WorkerState_Transition*>(
      ::clap::pb::WorkerState_Transition::internal_default_instance());
}
class WorkerState::_Internal {
 public:
  static const ::clap::pb::WorkerState_TreeOption& tree_option(const WorkerState* msg);
  static const ::clap::pb::WorkerState_Evaluation& evaluation(const WorkerState* msg);
  static const ::clap::pb::WorkerState_Transition& transition(const WorkerState* msg);
};

const ::clap::pb::WorkerState_TreeOption&
WorkerState::_Internal::tree_option(const WorkerState* msg) {
  return *msg->tree_option_;
}
const ::clap::pb::WorkerState_Evaluation&
WorkerState::_Internal::evaluation(const WorkerState* msg) {
  return *msg->evaluation_;
}
const ::clap::pb::WorkerState_Transition&
WorkerState::_Internal::transition(const WorkerState* msg) {
  return *msg->transition_;
}
WorkerState::WorkerState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  legal_actions_(arena),
  observation_tensor_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clap.pb.WorkerState)
}
WorkerState::WorkerState(const WorkerState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      legal_actions_(from.legal_actions_),
      observation_tensor_(from.observation_tensor_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tree_option()) {
    tree_option_ = new ::clap::pb::WorkerState_TreeOption(*from.tree_option_);
  } else {
    tree_option_ = nullptr;
  }
  if (from._internal_has_evaluation()) {
    evaluation_ = new ::clap::pb::WorkerState_Evaluation(*from.evaluation_);
  } else {
    evaluation_ = nullptr;
  }
  if (from._internal_has_transition()) {
    transition_ = new ::clap::pb::WorkerState_Transition(*from.transition_);
  } else {
    transition_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clap.pb.WorkerState)
}

void WorkerState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorkerState_clap_2eproto.base);
  ::memset(&tree_option_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transition_) -
      reinterpret_cast<char*>(&tree_option_)) + sizeof(transition_));
}

WorkerState::~WorkerState() {
  // @@protoc_insertion_point(destructor:clap.pb.WorkerState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkerState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete tree_option_;
  if (this != internal_default_instance()) delete evaluation_;
  if (this != internal_default_instance()) delete transition_;
}

void WorkerState::ArenaDtor(void* object) {
  WorkerState* _this = reinterpret_cast< WorkerState* >(object);
  (void)_this;
}
void WorkerState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkerState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkerState& WorkerState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkerState_clap_2eproto.base);
  return *internal_default_instance();
}


void WorkerState::Clear() {
// @@protoc_insertion_point(message_clear_start:clap.pb.WorkerState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  legal_actions_.Clear();
  observation_tensor_.Clear();
  if (GetArena() == nullptr && tree_option_ != nullptr) {
    delete tree_option_;
  }
  tree_option_ = nullptr;
  if (GetArena() == nullptr && evaluation_ != nullptr) {
    delete evaluation_;
  }
  evaluation_ = nullptr;
  if (GetArena() == nullptr && transition_ != nullptr) {
    delete transition_;
  }
  transition_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkerState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 legal_actions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_legal_actions(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_legal_actions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float observation_tensor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_observation_tensor(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_observation_tensor(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .clap.pb.WorkerState.TreeOption tree_option = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tree_option(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clap.pb.WorkerState.Evaluation evaluation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_evaluation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clap.pb.WorkerState.Transition transition = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_transition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkerState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clap.pb.WorkerState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 legal_actions = 1;
  {
    int byte_size = _legal_actions_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_legal_actions(), byte_size, target);
    }
  }

  // repeated float observation_tensor = 2;
  if (this->_internal_observation_tensor_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_observation_tensor(), target);
  }

  // .clap.pb.WorkerState.TreeOption tree_option = 3;
  if (this->has_tree_option()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::tree_option(this), target, stream);
  }

  // .clap.pb.WorkerState.Evaluation evaluation = 4;
  if (this->has_evaluation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::evaluation(this), target, stream);
  }

  // .clap.pb.WorkerState.Transition transition = 5;
  if (this->has_transition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::transition(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clap.pb.WorkerState)
  return target;
}

size_t WorkerState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clap.pb.WorkerState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 legal_actions = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->legal_actions_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _legal_actions_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float observation_tensor = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_observation_tensor_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _observation_tensor_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .clap.pb.WorkerState.TreeOption tree_option = 3;
  if (this->has_tree_option()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tree_option_);
  }

  // .clap.pb.WorkerState.Evaluation evaluation = 4;
  if (this->has_evaluation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *evaluation_);
  }

  // .clap.pb.WorkerState.Transition transition = 5;
  if (this->has_transition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transition_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkerState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clap.pb.WorkerState)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkerState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkerState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clap.pb.WorkerState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clap.pb.WorkerState)
    MergeFrom(*source);
  }
}

void WorkerState::MergeFrom(const WorkerState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clap.pb.WorkerState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  legal_actions_.MergeFrom(from.legal_actions_);
  observation_tensor_.MergeFrom(from.observation_tensor_);
  if (from.has_tree_option()) {
    _internal_mutable_tree_option()->::clap::pb::WorkerState_TreeOption::MergeFrom(from._internal_tree_option());
  }
  if (from.has_evaluation()) {
    _internal_mutable_evaluation()->::clap::pb::WorkerState_Evaluation::MergeFrom(from._internal_evaluation());
  }
  if (from.has_transition()) {
    _internal_mutable_transition()->::clap::pb::WorkerState_Transition::MergeFrom(from._internal_transition());
  }
}

void WorkerState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clap.pb.WorkerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkerState::CopyFrom(const WorkerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clap.pb.WorkerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerState::IsInitialized() const {
  return true;
}

void WorkerState::InternalSwap(WorkerState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  legal_actions_.InternalSwap(&other->legal_actions_);
  observation_tensor_.InternalSwap(&other->observation_tensor_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkerState, transition_)
      + sizeof(WorkerState::transition_)
      - PROTOBUF_FIELD_OFFSET(WorkerState, tree_option_)>(
          reinterpret_cast<char*>(&tree_option_),
          reinterpret_cast<char*>(&other->tree_option_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkerState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Trajectory_Statistics::InitAsDefaultInstance() {
}
class Trajectory_Statistics::_Internal {
 public:
};

Trajectory_Statistics::Trajectory_Statistics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rewards_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clap.pb.Trajectory.Statistics)
}
Trajectory_Statistics::Trajectory_Statistics(const Trajectory_Statistics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rewards_(from.rewards_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  game_steps_ = from.game_steps_;
  // @@protoc_insertion_point(copy_constructor:clap.pb.Trajectory.Statistics)
}

void Trajectory_Statistics::SharedCtor() {
  game_steps_ = 0;
}

Trajectory_Statistics::~Trajectory_Statistics() {
  // @@protoc_insertion_point(destructor:clap.pb.Trajectory.Statistics)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Trajectory_Statistics::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Trajectory_Statistics::ArenaDtor(void* object) {
  Trajectory_Statistics* _this = reinterpret_cast< Trajectory_Statistics* >(object);
  (void)_this;
}
void Trajectory_Statistics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Trajectory_Statistics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trajectory_Statistics& Trajectory_Statistics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Trajectory_Statistics_clap_2eproto.base);
  return *internal_default_instance();
}


void Trajectory_Statistics::Clear() {
// @@protoc_insertion_point(message_clear_start:clap.pb.Trajectory.Statistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rewards_.Clear();
  game_steps_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Trajectory_Statistics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float rewards = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_rewards(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_rewards(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 game_steps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          game_steps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Trajectory_Statistics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clap.pb.Trajectory.Statistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float rewards = 1;
  if (this->_internal_rewards_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_rewards(), target);
  }

  // int32 game_steps = 2;
  if (this->game_steps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_game_steps(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clap.pb.Trajectory.Statistics)
  return target;
}

size_t Trajectory_Statistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clap.pb.Trajectory.Statistics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float rewards = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_rewards_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _rewards_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 game_steps = 2;
  if (this->game_steps() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_game_steps());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trajectory_Statistics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clap.pb.Trajectory.Statistics)
  GOOGLE_DCHECK_NE(&from, this);
  const Trajectory_Statistics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Trajectory_Statistics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clap.pb.Trajectory.Statistics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clap.pb.Trajectory.Statistics)
    MergeFrom(*source);
  }
}

void Trajectory_Statistics::MergeFrom(const Trajectory_Statistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clap.pb.Trajectory.Statistics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rewards_.MergeFrom(from.rewards_);
  if (from.game_steps() != 0) {
    _internal_set_game_steps(from._internal_game_steps());
  }
}

void Trajectory_Statistics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clap.pb.Trajectory.Statistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trajectory_Statistics::CopyFrom(const Trajectory_Statistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clap.pb.Trajectory.Statistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trajectory_Statistics::IsInitialized() const {
  return true;
}

void Trajectory_Statistics::InternalSwap(Trajectory_Statistics* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rewards_.InternalSwap(&other->rewards_);
  swap(game_steps_, other->game_steps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Trajectory_Statistics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Trajectory::InitAsDefaultInstance() {
  ::clap::pb::_Trajectory_default_instance_._instance.get_mutable()->statistics_ = const_cast< ::clap::pb::Trajectory_Statistics*>(
      ::clap::pb::Trajectory_Statistics::internal_default_instance());
}
class Trajectory::_Internal {
 public:
  static const ::clap::pb::Trajectory_Statistics& statistics(const Trajectory* msg);
};

const ::clap::pb::Trajectory_Statistics&
Trajectory::_Internal::statistics(const Trajectory* msg) {
  return *msg->statistics_;
}
Trajectory::Trajectory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  states_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clap.pb.Trajectory)
}
Trajectory::Trajectory(const Trajectory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      states_(from.states_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  appendix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_appendix().empty()) {
    appendix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_appendix(),
      GetArena());
  }
  if (from._internal_has_statistics()) {
    statistics_ = new ::clap::pb::Trajectory_Statistics(*from.statistics_);
  } else {
    statistics_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:clap.pb.Trajectory)
}

void Trajectory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Trajectory_clap_2eproto.base);
  appendix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  statistics_ = nullptr;
}

Trajectory::~Trajectory() {
  // @@protoc_insertion_point(destructor:clap.pb.Trajectory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Trajectory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  appendix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete statistics_;
}

void Trajectory::ArenaDtor(void* object) {
  Trajectory* _this = reinterpret_cast< Trajectory* >(object);
  (void)_this;
}
void Trajectory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Trajectory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trajectory& Trajectory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Trajectory_clap_2eproto.base);
  return *internal_default_instance();
}


void Trajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:clap.pb.Trajectory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  states_.Clear();
  appendix_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && statistics_ != nullptr) {
    delete statistics_;
  }
  statistics_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Trajectory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .clap.pb.WorkerState states = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .clap.pb.Trajectory.Statistics statistics = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_statistics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string appendix = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_appendix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "clap.pb.Trajectory.appendix"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Trajectory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clap.pb.Trajectory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .clap.pb.WorkerState states = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_states_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_states(i), target, stream);
  }

  // .clap.pb.Trajectory.Statistics statistics = 2;
  if (this->has_statistics()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::statistics(this), target, stream);
  }

  // string appendix = 3;
  if (this->appendix().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_appendix().data(), static_cast<int>(this->_internal_appendix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clap.pb.Trajectory.appendix");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_appendix(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clap.pb.Trajectory)
  return target;
}

size_t Trajectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clap.pb.Trajectory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clap.pb.WorkerState states = 1;
  total_size += 1UL * this->_internal_states_size();
  for (const auto& msg : this->states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string appendix = 3;
  if (this->appendix().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_appendix());
  }

  // .clap.pb.Trajectory.Statistics statistics = 2;
  if (this->has_statistics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *statistics_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trajectory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clap.pb.Trajectory)
  GOOGLE_DCHECK_NE(&from, this);
  const Trajectory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Trajectory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clap.pb.Trajectory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clap.pb.Trajectory)
    MergeFrom(*source);
  }
}

void Trajectory::MergeFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clap.pb.Trajectory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  states_.MergeFrom(from.states_);
  if (from.appendix().size() > 0) {
    _internal_set_appendix(from._internal_appendix());
  }
  if (from.has_statistics()) {
    _internal_mutable_statistics()->::clap::pb::Trajectory_Statistics::MergeFrom(from._internal_statistics());
  }
}

void Trajectory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clap.pb.Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trajectory::CopyFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clap.pb.Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trajectory::IsInitialized() const {
  return true;
}

void Trajectory::InternalSwap(Trajectory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  states_.InternalSwap(&other->states_);
  appendix_.Swap(&other->appendix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(statistics_, other->statistics_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Trajectory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Trajectories::InitAsDefaultInstance() {
}
class Trajectories::_Internal {
 public:
};

Trajectories::Trajectories(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  trajectories_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clap.pb.Trajectories)
}
Trajectories::Trajectories(const Trajectories& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      trajectories_(from.trajectories_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:clap.pb.Trajectories)
}

void Trajectories::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Trajectories_clap_2eproto.base);
}

Trajectories::~Trajectories() {
  // @@protoc_insertion_point(destructor:clap.pb.Trajectories)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Trajectories::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Trajectories::ArenaDtor(void* object) {
  Trajectories* _this = reinterpret_cast< Trajectories* >(object);
  (void)_this;
}
void Trajectories::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Trajectories::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trajectories& Trajectories::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Trajectories_clap_2eproto.base);
  return *internal_default_instance();
}


void Trajectories::Clear() {
// @@protoc_insertion_point(message_clear_start:clap.pb.Trajectories)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectories_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Trajectories::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .clap.pb.Trajectory trajectories = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trajectories(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Trajectories::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clap.pb.Trajectories)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .clap.pb.Trajectory trajectories = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trajectories_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_trajectories(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clap.pb.Trajectories)
  return target;
}

size_t Trajectories::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clap.pb.Trajectories)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clap.pb.Trajectory trajectories = 1;
  total_size += 1UL * this->_internal_trajectories_size();
  for (const auto& msg : this->trajectories_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trajectories::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clap.pb.Trajectories)
  GOOGLE_DCHECK_NE(&from, this);
  const Trajectories* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Trajectories>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clap.pb.Trajectories)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clap.pb.Trajectories)
    MergeFrom(*source);
  }
}

void Trajectories::MergeFrom(const Trajectories& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clap.pb.Trajectories)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trajectories_.MergeFrom(from.trajectories_);
}

void Trajectories::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clap.pb.Trajectories)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trajectories::CopyFrom(const Trajectories& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clap.pb.Trajectories)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trajectories::IsInitialized() const {
  return true;
}

void Trajectories::InternalSwap(Trajectories* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  trajectories_.InternalSwap(&other->trajectories_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Trajectories::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Heartbeat::InitAsDefaultInstance() {
}
class Heartbeat::_Internal {
 public:
};

Heartbeat::Heartbeat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clap.pb.Heartbeat)
}
Heartbeat::Heartbeat(const Heartbeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:clap.pb.Heartbeat)
}

void Heartbeat::SharedCtor() {
}

Heartbeat::~Heartbeat() {
  // @@protoc_insertion_point(destructor:clap.pb.Heartbeat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Heartbeat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Heartbeat::ArenaDtor(void* object) {
  Heartbeat* _this = reinterpret_cast< Heartbeat* >(object);
  (void)_this;
}
void Heartbeat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Heartbeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Heartbeat& Heartbeat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Heartbeat_clap_2eproto.base);
  return *internal_default_instance();
}


void Heartbeat::Clear() {
// @@protoc_insertion_point(message_clear_start:clap.pb.Heartbeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Heartbeat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Heartbeat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clap.pb.Heartbeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clap.pb.Heartbeat)
  return target;
}

size_t Heartbeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clap.pb.Heartbeat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Heartbeat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clap.pb.Heartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  const Heartbeat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Heartbeat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clap.pb.Heartbeat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clap.pb.Heartbeat)
    MergeFrom(*source);
  }
}

void Heartbeat::MergeFrom(const Heartbeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clap.pb.Heartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Heartbeat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clap.pb.Heartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Heartbeat::CopyFrom(const Heartbeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clap.pb.Heartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Heartbeat::IsInitialized() const {
  return true;
}

void Heartbeat::InternalSwap(Heartbeat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Heartbeat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Packet::InitAsDefaultInstance() {
  ::clap::pb::_Packet_default_instance_.heartbeat_ = const_cast< ::clap::pb::Heartbeat*>(
      ::clap::pb::Heartbeat::internal_default_instance());
  ::clap::pb::_Packet_default_instance_.goodbye_ = const_cast< ::clap::pb::Heartbeat*>(
      ::clap::pb::Heartbeat::internal_default_instance());
  ::clap::pb::_Packet_default_instance_.model_subscribe_ = const_cast< ::clap::pb::Heartbeat*>(
      ::clap::pb::Heartbeat::internal_default_instance());
  ::clap::pb::_Packet_default_instance_.model_info_ = const_cast< ::clap::pb::ModelInfo*>(
      ::clap::pb::ModelInfo::internal_default_instance());
  ::clap::pb::_Packet_default_instance_.model_request_ = const_cast< ::clap::pb::ModelInfo*>(
      ::clap::pb::ModelInfo::internal_default_instance());
  ::clap::pb::_Packet_default_instance_.model_response_ = const_cast< ::clap::pb::Model*>(
      ::clap::pb::Model::internal_default_instance());
  ::clap::pb::_Packet_default_instance_.trajectory_ = const_cast< ::clap::pb::Trajectory*>(
      ::clap::pb::Trajectory::internal_default_instance());
}
class Packet::_Internal {
 public:
  static const ::clap::pb::Heartbeat& heartbeat(const Packet* msg);
  static const ::clap::pb::Heartbeat& goodbye(const Packet* msg);
  static const ::clap::pb::Heartbeat& model_subscribe(const Packet* msg);
  static const ::clap::pb::ModelInfo& model_info(const Packet* msg);
  static const ::clap::pb::ModelInfo& model_request(const Packet* msg);
  static const ::clap::pb::Model& model_response(const Packet* msg);
  static const ::clap::pb::Trajectory& trajectory(const Packet* msg);
};

const ::clap::pb::Heartbeat&
Packet::_Internal::heartbeat(const Packet* msg) {
  return *msg->payload_.heartbeat_;
}
const ::clap::pb::Heartbeat&
Packet::_Internal::goodbye(const Packet* msg) {
  return *msg->payload_.goodbye_;
}
const ::clap::pb::Heartbeat&
Packet::_Internal::model_subscribe(const Packet* msg) {
  return *msg->payload_.model_subscribe_;
}
const ::clap::pb::ModelInfo&
Packet::_Internal::model_info(const Packet* msg) {
  return *msg->payload_.model_info_;
}
const ::clap::pb::ModelInfo&
Packet::_Internal::model_request(const Packet* msg) {
  return *msg->payload_.model_request_;
}
const ::clap::pb::Model&
Packet::_Internal::model_response(const Packet* msg) {
  return *msg->payload_.model_response_;
}
const ::clap::pb::Trajectory&
Packet::_Internal::trajectory(const Packet* msg) {
  return *msg->payload_.trajectory_;
}
void Packet::set_allocated_heartbeat(::clap::pb::Heartbeat* heartbeat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (heartbeat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(heartbeat);
    if (message_arena != submessage_arena) {
      heartbeat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heartbeat, submessage_arena);
    }
    set_has_heartbeat();
    payload_.heartbeat_ = heartbeat;
  }
  // @@protoc_insertion_point(field_set_allocated:clap.pb.Packet.heartbeat)
}
void Packet::set_allocated_goodbye(::clap::pb::Heartbeat* goodbye) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (goodbye) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(goodbye);
    if (message_arena != submessage_arena) {
      goodbye = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, goodbye, submessage_arena);
    }
    set_has_goodbye();
    payload_.goodbye_ = goodbye;
  }
  // @@protoc_insertion_point(field_set_allocated:clap.pb.Packet.goodbye)
}
void Packet::set_allocated_model_subscribe(::clap::pb::Heartbeat* model_subscribe) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (model_subscribe) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(model_subscribe);
    if (message_arena != submessage_arena) {
      model_subscribe = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_subscribe, submessage_arena);
    }
    set_has_model_subscribe();
    payload_.model_subscribe_ = model_subscribe;
  }
  // @@protoc_insertion_point(field_set_allocated:clap.pb.Packet.model_subscribe)
}
void Packet::set_allocated_model_info(::clap::pb::ModelInfo* model_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (model_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(model_info);
    if (message_arena != submessage_arena) {
      model_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_info, submessage_arena);
    }
    set_has_model_info();
    payload_.model_info_ = model_info;
  }
  // @@protoc_insertion_point(field_set_allocated:clap.pb.Packet.model_info)
}
void Packet::set_allocated_model_request(::clap::pb::ModelInfo* model_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (model_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(model_request);
    if (message_arena != submessage_arena) {
      model_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_request, submessage_arena);
    }
    set_has_model_request();
    payload_.model_request_ = model_request;
  }
  // @@protoc_insertion_point(field_set_allocated:clap.pb.Packet.model_request)
}
void Packet::set_allocated_model_response(::clap::pb::Model* model_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (model_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(model_response);
    if (message_arena != submessage_arena) {
      model_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_response, submessage_arena);
    }
    set_has_model_response();
    payload_.model_response_ = model_response;
  }
  // @@protoc_insertion_point(field_set_allocated:clap.pb.Packet.model_response)
}
void Packet::set_allocated_trajectory(::clap::pb::Trajectory* trajectory) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (trajectory) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(trajectory);
    if (message_arena != submessage_arena) {
      trajectory = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trajectory, submessage_arena);
    }
    set_has_trajectory();
    payload_.trajectory_ = trajectory;
  }
  // @@protoc_insertion_point(field_set_allocated:clap.pb.Packet.trajectory)
}
Packet::Packet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:clap.pb.Packet)
}
Packet::Packet(const Packet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_payload();
  switch (from.payload_case()) {
    case kHeartbeat: {
      _internal_mutable_heartbeat()->::clap::pb::Heartbeat::MergeFrom(from._internal_heartbeat());
      break;
    }
    case kGoodbye: {
      _internal_mutable_goodbye()->::clap::pb::Heartbeat::MergeFrom(from._internal_goodbye());
      break;
    }
    case kModelSubscribe: {
      _internal_mutable_model_subscribe()->::clap::pb::Heartbeat::MergeFrom(from._internal_model_subscribe());
      break;
    }
    case kModelInfo: {
      _internal_mutable_model_info()->::clap::pb::ModelInfo::MergeFrom(from._internal_model_info());
      break;
    }
    case kModelRequest: {
      _internal_mutable_model_request()->::clap::pb::ModelInfo::MergeFrom(from._internal_model_request());
      break;
    }
    case kModelResponse: {
      _internal_mutable_model_response()->::clap::pb::Model::MergeFrom(from._internal_model_response());
      break;
    }
    case kTrajectory: {
      _internal_mutable_trajectory()->::clap::pb::Trajectory::MergeFrom(from._internal_trajectory());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:clap.pb.Packet)
}

void Packet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Packet_clap_2eproto.base);
  clear_has_payload();
}

Packet::~Packet() {
  // @@protoc_insertion_point(destructor:clap.pb.Packet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Packet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_payload()) {
    clear_payload();
  }
}

void Packet::ArenaDtor(void* object) {
  Packet* _this = reinterpret_cast< Packet* >(object);
  (void)_this;
}
void Packet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Packet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Packet& Packet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Packet_clap_2eproto.base);
  return *internal_default_instance();
}


void Packet::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:clap.pb.Packet)
  switch (payload_case()) {
    case kHeartbeat: {
      if (GetArena() == nullptr) {
        delete payload_.heartbeat_;
      }
      break;
    }
    case kGoodbye: {
      if (GetArena() == nullptr) {
        delete payload_.goodbye_;
      }
      break;
    }
    case kModelSubscribe: {
      if (GetArena() == nullptr) {
        delete payload_.model_subscribe_;
      }
      break;
    }
    case kModelInfo: {
      if (GetArena() == nullptr) {
        delete payload_.model_info_;
      }
      break;
    }
    case kModelRequest: {
      if (GetArena() == nullptr) {
        delete payload_.model_request_;
      }
      break;
    }
    case kModelResponse: {
      if (GetArena() == nullptr) {
        delete payload_.model_response_;
      }
      break;
    }
    case kTrajectory: {
      if (GetArena() == nullptr) {
        delete payload_.trajectory_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void Packet::Clear() {
// @@protoc_insertion_point(message_clear_start:clap.pb.Packet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Packet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .clap.pb.Heartbeat heartbeat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_heartbeat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clap.pb.Heartbeat goodbye = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_goodbye(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clap.pb.Heartbeat model_subscribe = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_subscribe(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clap.pb.ModelInfo model_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clap.pb.ModelInfo model_request = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clap.pb.Model model_response = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .clap.pb.Trajectory trajectory = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_trajectory(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Packet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clap.pb.Packet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .clap.pb.Heartbeat heartbeat = 1;
  if (_internal_has_heartbeat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::heartbeat(this), target, stream);
  }

  // .clap.pb.Heartbeat goodbye = 2;
  if (_internal_has_goodbye()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::goodbye(this), target, stream);
  }

  // .clap.pb.Heartbeat model_subscribe = 3;
  if (_internal_has_model_subscribe()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::model_subscribe(this), target, stream);
  }

  // .clap.pb.ModelInfo model_info = 4;
  if (_internal_has_model_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::model_info(this), target, stream);
  }

  // .clap.pb.ModelInfo model_request = 5;
  if (_internal_has_model_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::model_request(this), target, stream);
  }

  // .clap.pb.Model model_response = 6;
  if (_internal_has_model_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::model_response(this), target, stream);
  }

  // .clap.pb.Trajectory trajectory = 7;
  if (_internal_has_trajectory()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::trajectory(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clap.pb.Packet)
  return target;
}

size_t Packet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clap.pb.Packet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (payload_case()) {
    // .clap.pb.Heartbeat heartbeat = 1;
    case kHeartbeat: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.heartbeat_);
      break;
    }
    // .clap.pb.Heartbeat goodbye = 2;
    case kGoodbye: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.goodbye_);
      break;
    }
    // .clap.pb.Heartbeat model_subscribe = 3;
    case kModelSubscribe: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.model_subscribe_);
      break;
    }
    // .clap.pb.ModelInfo model_info = 4;
    case kModelInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.model_info_);
      break;
    }
    // .clap.pb.ModelInfo model_request = 5;
    case kModelRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.model_request_);
      break;
    }
    // .clap.pb.Model model_response = 6;
    case kModelResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.model_response_);
      break;
    }
    // .clap.pb.Trajectory trajectory = 7;
    case kTrajectory: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.trajectory_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Packet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clap.pb.Packet)
  GOOGLE_DCHECK_NE(&from, this);
  const Packet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Packet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clap.pb.Packet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clap.pb.Packet)
    MergeFrom(*source);
  }
}

void Packet::MergeFrom(const Packet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clap.pb.Packet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.payload_case()) {
    case kHeartbeat: {
      _internal_mutable_heartbeat()->::clap::pb::Heartbeat::MergeFrom(from._internal_heartbeat());
      break;
    }
    case kGoodbye: {
      _internal_mutable_goodbye()->::clap::pb::Heartbeat::MergeFrom(from._internal_goodbye());
      break;
    }
    case kModelSubscribe: {
      _internal_mutable_model_subscribe()->::clap::pb::Heartbeat::MergeFrom(from._internal_model_subscribe());
      break;
    }
    case kModelInfo: {
      _internal_mutable_model_info()->::clap::pb::ModelInfo::MergeFrom(from._internal_model_info());
      break;
    }
    case kModelRequest: {
      _internal_mutable_model_request()->::clap::pb::ModelInfo::MergeFrom(from._internal_model_request());
      break;
    }
    case kModelResponse: {
      _internal_mutable_model_response()->::clap::pb::Model::MergeFrom(from._internal_model_response());
      break;
    }
    case kTrajectory: {
      _internal_mutable_trajectory()->::clap::pb::Trajectory::MergeFrom(from._internal_trajectory());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void Packet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clap.pb.Packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet::CopyFrom(const Packet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clap.pb.Packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet::IsInitialized() const {
  return true;
}

void Packet::InternalSwap(Packet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Packet::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
}  // namespace clap
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::clap::pb::CPU* Arena::CreateMaybeMessage< ::clap::pb::CPU >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clap::pb::CPU >(arena);
}
template<> PROTOBUF_NOINLINE ::clap::pb::GPU* Arena::CreateMaybeMessage< ::clap::pb::GPU >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clap::pb::GPU >(arena);
}
template<> PROTOBUF_NOINLINE ::clap::pb::Hardware* Arena::CreateMaybeMessage< ::clap::pb::Hardware >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clap::pb::Hardware >(arena);
}
template<> PROTOBUF_NOINLINE ::clap::pb::Node* Arena::CreateMaybeMessage< ::clap::pb::Node >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clap::pb::Node >(arena);
}
template<> PROTOBUF_NOINLINE ::clap::pb::ModelInfo* Arena::CreateMaybeMessage< ::clap::pb::ModelInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clap::pb::ModelInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::clap::pb::Model* Arena::CreateMaybeMessage< ::clap::pb::Model >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clap::pb::Model >(arena);
}
template<> PROTOBUF_NOINLINE ::clap::pb::WorkerState_TreeOption* Arena::CreateMaybeMessage< ::clap::pb::WorkerState_TreeOption >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clap::pb::WorkerState_TreeOption >(arena);
}
template<> PROTOBUF_NOINLINE ::clap::pb::WorkerState_Evaluation* Arena::CreateMaybeMessage< ::clap::pb::WorkerState_Evaluation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clap::pb::WorkerState_Evaluation >(arena);
}
template<> PROTOBUF_NOINLINE ::clap::pb::WorkerState_Transition* Arena::CreateMaybeMessage< ::clap::pb::WorkerState_Transition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clap::pb::WorkerState_Transition >(arena);
}
template<> PROTOBUF_NOINLINE ::clap::pb::WorkerState* Arena::CreateMaybeMessage< ::clap::pb::WorkerState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clap::pb::WorkerState >(arena);
}
template<> PROTOBUF_NOINLINE ::clap::pb::Trajectory_Statistics* Arena::CreateMaybeMessage< ::clap::pb::Trajectory_Statistics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clap::pb::Trajectory_Statistics >(arena);
}
template<> PROTOBUF_NOINLINE ::clap::pb::Trajectory* Arena::CreateMaybeMessage< ::clap::pb::Trajectory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clap::pb::Trajectory >(arena);
}
template<> PROTOBUF_NOINLINE ::clap::pb::Trajectories* Arena::CreateMaybeMessage< ::clap::pb::Trajectories >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clap::pb::Trajectories >(arena);
}
template<> PROTOBUF_NOINLINE ::clap::pb::Heartbeat* Arena::CreateMaybeMessage< ::clap::pb::Heartbeat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clap::pb::Heartbeat >(arena);
}
template<> PROTOBUF_NOINLINE ::clap::pb::Packet* Arena::CreateMaybeMessage< ::clap::pb::Packet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clap::pb::Packet >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

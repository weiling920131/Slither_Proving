syntax = "proto3";

package clap.pb;

message CPU {
  string name = 1;
  int32 cores = 2;
  int32 threads = 3;
  float clock = 4;
}

message GPU {
  string name = 1;
  int64 memory = 2;
}

message Hardware {
  repeated CPU cpus = 1;
  repeated GPU gpus = 2;
}

message Node {
  string identity = 1;
  string hostname = 2;
  Hardware hardware = 3;
}

// message Model {
//   int32 iteration = 1;
//   bytes blob = 2;
// }

// a message for model identity
message ModelInfo {
  // model name
  string name = 1;
  // model version
  int32 version = 2;
}

// a message to transfer model
message Model {
  // model identity
  ModelInfo info = 1;
  // list of model binary
  repeated bytes blobs = 2;
}

// message State {
//   int32 action = 1;
//   float value = 2;
//   repeated float policy = 3;
// }

// message Trajectory {
//   repeated State states = 1;
//   repeated float returns = 2;
// }

// a message of the state of a worker
message WorkerState {
  // a message for evaluation configs (Actor)
  message TreeOption {
    int32 simulation_count = 1;
    float tree_min_value = 2;
    float tree_max_value = 3;
    float c_puct = 4;
    float dirichlet_alpha = 5;
    float dirichlet_epsilon = 6;
    float discount = 7;
  }
  // a message for an evaluation result (Actor)
  message Evaluation {
    // root forward value
    float value = 1;
    // MCTS root policy (used to determine action)
    repeated float policy = 2;
    // MCTS root children's average value
    float average_value = 3;
  }
  // a message for a game transition (GameServer)
  message Transition {
    // current player to play
    int32 current_player = 1;
    // action applied in the game
    int32 action = 2;
    // immediate rewards after applying the action
    repeated float rewards = 3;
  }
  // unordered legal actions
  repeated int32 legal_actions = 1;
  // flatten observation tensor
  repeated float observation_tensor = 2;
  // tree option
  TreeOption tree_option = 3;
  // evaluation result
  Evaluation evaluation = 4;
  // game transition
  Transition transition = 5;
}

// a message for a game _sequence_ (not necessary a full game)
message Trajectory {
  // a message for game statistics
  message Statistics {
    // cumulative rewards for the full game
    repeated float rewards = 1;
    // total game steps
    int32 game_steps = 2;
  }
  // sequential states
  repeated WorkerState states = 1;
  // sequence statistics
  Statistics statistics = 2;
  string appendix = 3;
}

message Trajectories { repeated Trajectory trajectories = 1; }

message Heartbeat {}

message Packet {
  oneof payload {
    Heartbeat heartbeat = 1;
    Heartbeat goodbye = 2;
    Heartbeat model_subscribe = 3;
    ModelInfo model_info = 4;
    ModelInfo model_request = 5;
    Model model_response = 6;

    Trajectory trajectory = 7;
  }
}